package handlers

import (
	"TG_Bot2/utils"
	"context"
	"log"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

func CallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –°—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É update.CallbackQuery –Ω–∞ nil
	// –ö–æ–Ω—Ñ–∏–≥ –Ω—É–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –∏ –ª—É—á—à–µ –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥ —Å —ç—Ç–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π https://github.com/caarlos0/env
	config, err := utils.LoadConfig("config/config.yaml")
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
		return
	}

	callbackQueryID := update.CallbackQuery.ID
	// –í–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞ switch –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
	if update.CallbackQuery.Data == "check_subscription" {
		// –í—ã–Ω–µ—Å—Ç–∏ —Ç–µ–ª–æ —É—Å–ª–æ–≤–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
		userID := update.CallbackQuery.From.ID

		isSubscribed, err := utils.CheckSubscription(ctx, b, config.Channels.TargetChannelID, userID)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: %v", err)
			return
		}

		messageText := "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
		if isSubscribed {
			messageText = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª! üéâ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∞."

			// –û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
			/*–°—Ç–æ–∏—Ç –≤—ã–Ω–µ—Å—Ç–∏ approveJoinRequest, answerCallbackQuery, sendMessage, sendErrorMessage –∏ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏, —á—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–¥ –∏ —É–ª—É—á—à–∏—Ç—å —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
			–ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏

			func sendErrorMessage(ctx context.Context, b *bot.Bot, chatID int64, text string) {
				err := sendMessage(ctx, b, chatID, text)
				if err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", chatID, err)
				}
			}*/
			_, approveErr := b.ApproveChatJoinRequest(ctx, &bot.ApproveChatJoinRequestParams{
				ChatID: config.Channels.JoinRequestChatID,
				UserID: userID,
			})
			if approveErr != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d: %v", userID, approveErr)
				messageText = "–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
			} else {
				log.Printf("–ó–∞—è–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞", userID)
			}
		}

		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callbackQueryID,
		})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è callback-–∑–∞–ø—Ä–æ—Å–∞: %v", err)
		}

		_, err = b.SendMessage(ctx, &bot.SendMessageParams{
			ChatID: userID,
			Text:   messageText,
		})
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
		}
	}
}
